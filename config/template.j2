/**
 * @file
 * Defines default strategy parameter values for the given timeframe.
 */

// Defines indicator's parameter values for the given pair symbol and timeframe.
struct Indi_Momentum_Params_{{ Timeframe }} : MomentumParams {
  Indi_Momentum_Params_{{ Timeframe }}() : MomentumParams(indi_momentum_defaults, PERIOD_{{ Timeframe }}) {
    applied_price = (ENUM_APPLIED_PRICE){{ Momentum_Indi_Momentum_Applied_Price | default(0) }};
    period = {{ Momentum_Indi_Momentum_Period | default(0) }};
    shift = {{ Momentum_Indi_Momentum_Shift | default(0) }};
  }
} indi_momentum_{{ Timeframe | lower }};

// Defines strategy's parameter values for the given pair symbol and timeframe.
struct Stg_Momentum_Params_{{ Timeframe }} : StgParams {
  // Struct constructor.
  Stg_Momentum_Params_{{ Timeframe }}() : StgParams(stg_momentum_defaults) {
    lot_size = {{ Momentum_LotSize | default(0) }};
    signal_open_method = {{ Momentum_SignalOpenMethod | default(0) }};
    signal_open_filter_method = {{ Momentum_SignalOpenFilterMethod | default(1) }};
    signal_open_level = (float){{ Momentum_SignalOpenLevel | default(0) }};
    signal_open_boost = {{ Momentum_SignalOpenBoostMethod | default(0) }};
    signal_close_method = {{ Momentum_SignalCloseMethod | default(0) }};
    signal_close_level = (float){{ Momentum_SignalCloseLevel | default(0) }};
    price_stop_method = {{ Momentum_PriceStopMethod | default(0) }};
    price_stop_level = (float){{ Momentum_SignalCloseLevel | default(1) }};
    tick_filter_method = {{ Momentum_TickFilterMethod  | default(1) }};
    max_spread = {{ Momentum_MaxSpread | default(0) }};
  }
} stg_momentum_{{ Timeframe | lower }};
